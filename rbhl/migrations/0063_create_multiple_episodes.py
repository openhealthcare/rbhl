# Generated by Django 2.2.16 on 2022-05-16 16:43

from django.db import migrations
from django.db.models import Count


# Generated by Django 2.2.16 on 2021-11-26 13:50

from django.db import migrations


def get_episode_ids_with_duplicate_referrals(Episode):
    """
    Returns episode ids of patients that seem to have
    duplicate referrals because they have the same
    date of referral or date of first appointment.
    """
    result = set()
    multiple_referral_episodes = Episode.objects.annotate(cnt=Count('referral')).filter(cnt__gt=1)
    multiple_referral_episodes = multiple_referral_episodes.prefetch_related('referral_set')
    for episode in multiple_referral_episodes:
        referrals = episode.referral_set.all()
        referral_dates = [i.date_of_referral for i in referrals if i.date_of_referral]
        if referral_dates and not len(referral_dates) == len(set(referral_dates)):
            result.add(episode.id)
        else:
            dates_of_first_clinic = [
                i.date_first_appointment for i in referrals if i.date_first_appointment
            ]
            if dates_of_first_clinic:
                if not len(dates_of_first_clinic) == len(set(dates_of_first_clinic)):
                    result.add(episode.id)
    return result


def get_closest_referral(episode):
    """
    Returns the closest referral within a year before the clinic date
    """
    referrals = episode.referral_set.all()
    clinic_log = episode.cliniclog_set.all()[0]
    if not clinic_log.clinic_date:
        return
    referrals_with_dates = [
        i for i in referrals if i.date_of_referral if i.date_of_referral
    ]
    closest = None
    closest_diff = None
    for referral in referrals_with_dates:
        if not referral.date_of_referral:
            continue
        if referral.date_of_referral > clinic_log.clinic_date:
            continue
        days_diff =  (clinic_log.clinic_date - referral.date_of_referral).days
        if days_diff > 365:
            continue
        if not closest:
            closest = referral
            closest_diff = days_diff
        elif closest_diff > days_diff:
            closest = referral
            closest_diff = days_diff
    return closest


def create_episode_from_referral(patient, referral):
    episode = patient.episode_set.create()
    bloods = referral.bloods_set.all()
    referral.episode = episode
    referral.save()
    if bloods:
        for blood in bloods:
            if blood.employment:
                employment = blood.employment
                employment.episode = episode
                employment.save()


def create_episodes(episode):
    """
    If there is no clinic log date then this is a sign that its
    a patient who has only been seen by the lab. Create an episode
    for each referral after the initial.

    If there is a clinic log date then create episides for all
    referrals apart from the one closest the clinic log date.

    Otherwise create an episode for each referral after the initial
    """
    clinic_log = episode.cliniclog_set.all()[0]

    if not clinic_log.clinic_date:
        referrals_that_need_episodes = list(episode.referral_set.all())[1:]
    else:
        closest_referral = get_closest_referral(episode)
        if closest_referral:
            referrals_that_need_episodes = [
                i for i in episode.referral_set.all() if not i.id == closest_referral.id
            ]
        else:
            referrals_that_need_episodes = list(episode.referral_set.all())[1:]
    for referral in referrals_that_need_episodes:
        create_episode_from_referral(episode.patient, referral)


def forwards(apps, schema_editor):
    Bloods = apps.get_model('lab', 'Bloods')
    Episode = apps.get_model('opal', 'Episode')
    episodes_with_duplicate_referrals = get_episode_ids_with_duplicate_referrals(Episode)
    episodes_with_multiple_referrals = Episode.objects.annotate(
        cnt=Count('referral')
    ).filter(
        cnt__gt=1
    ).exclude(
        id__in=episodes_with_duplicate_referrals
    ).prefetch_related(
        'referral_set', 'cliniclog_set'
    )
    for episode in episodes_with_multiple_referrals:
        create_episodes(episode)


class Migration(migrations.Migration):
    dependencies = [
        ('rbhl', '0062_cliniclog_sword'),
    ]


    operations = [
        migrations.RunPython(
            forwards
        )
    ]
